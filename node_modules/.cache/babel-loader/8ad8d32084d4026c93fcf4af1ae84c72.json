{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Particle_engine;\n\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { colorToRgb, getHslFromAnimation } from \"../Utils/ColorUtils\";\nimport { deepExtend, isInArray, itemFromArray, loadParticlesOptions } from \"../Utils/Utils\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\n\nconst fixOutMode = data => {\n  if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n    return;\n  }\n\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\n\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n\n    _Particle_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n          mainOptions = container.actualOptions,\n          particlesOptions = loadParticlesOptions(mainOptions.particles);\n    const shapeType = particlesOptions.shape.type,\n          reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n          sizeRange = sizeOptions.value;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = 0;\n\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = 0;\n          break;\n\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = Math.random() >= 0.5 ? 0 : 1;\n          break;\n\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = 1;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.bubble = {\n      inRange: false\n    };\n    this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    const canvasSize = container.canvas.size,\n          moveCenterPerc = this.options.move.center;\n    this.moveCenter = {\n      x: canvasSize.width * moveCenterPerc.x / 100,\n      y: canvasSize.height * moveCenterPerc.y / 100,\n      radius: this.options.move.center.radius\n    };\n    this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n\n    switch (this.options.move.direction) {\n      case \"inside\":\n        this.outType = \"inside\";\n        break;\n\n      case \"outside\":\n        this.outType = \"outside\";\n        break;\n    }\n\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    const gravityOptions = this.options.move.gravity;\n    this.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n    this.shadowColor = colorToRgb(this.options.shadow.color);\n\n    for (const updater of container.particles.updaters) {\n      if (updater.init) {\n        updater.init(this);\n      }\n    }\n\n    for (const mover of container.particles.movers) {\n      if (mover.init) {\n        mover.init(this);\n      }\n    }\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n          canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    var _a;\n\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n\n  getFillColor() {\n    var _a, _b;\n\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const backFactor = this.options.roll.mode === \"both\" ? 2 : 1,\n            backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0,\n            rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n\n    return color;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === \"split\") {\n      this.split();\n    }\n  }\n\n  reset() {\n    if (this.opacity) {\n      this.opacity.loops = 0;\n    }\n\n    this.size.loops = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = getValue(splitOptions.rate);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    var _a, _b, _c, _d;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size,\n          exactPosition = calcExactPositionOrRandomFromSize({\n      size: canvasSize,\n      position: position\n    }),\n          pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n          radius = this.getRadius(),\n          outModes = this.options.move.outModes,\n          fixHorizontal = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-horizontal\"],\n        coord: pos.x,\n        maxCoord: container.canvas.size.width,\n        setCb: value => pos.x += value,\n        radius\n      });\n    },\n          fixVertical = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-vertical\"],\n        coord: pos.y,\n        maxCoord: container.canvas.size.height,\n        setCb: value => pos.y += value,\n        radius\n      });\n    };\n\n    fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n    fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n    fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n    fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions,\n          radius = this.getRadius();\n\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n\n    const overlapOptions = collisionsOptions.overlap;\n\n    if (overlapOptions.enable) {\n      return false;\n    }\n\n    const retries = overlapOptions.retries;\n\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n\n    let overlaps = false;\n\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n\n    return overlaps;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n\n    if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n      return res;\n    }\n\n    const rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value);\n    const radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset);\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n\n  loadLife() {\n    const container = this.container,\n          particlesOptions = this.options,\n          lifeOptions = particlesOptions.life,\n          life = {\n      delay: container.retina.reduceFactor ? getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n\n    return life;\n  }\n\n}\n_Particle_engine = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Particle_engine","calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","colorToRgb","getHslFromAnimation","deepExtend","isInArray","itemFromArray","loadParticlesOptions","Shape","Vector","Vector3d","alterHsl","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","particles","shapeType","shape","type","reduceDuplicates","Array","overrideShapeType","shapeOptions","load","shapeData","loadShapeData","undefined","options","pathDelay","move","path","delay","zIndexValue","zIndex","initParticle","sizeOptions","size","sizeRange","enable","animation","max","min","loops","maxLoops","count","sizeAnimation","status","startValue","Math","random","velocity","sizeAnimationSpeed","reduceFactor","sync","bubble","inRange","calcPosition","zLayers","initialPosition","copy","canvasSize","canvas","moveCenterPerc","center","moveCenter","x","width","y","height","direction","initialVelocity","calculateVelocity","moveDecay","decay","gravityOptions","gravity","acceleration","inverse","offset","origin","needsSort","lastZIndex","z","zIndexFactor","sides","drawer","drawers","plugins","getShapeDrawer","loadShape","sideCountFunc","getSidesCount","life","loadLife","spawning","shadowColor","shadow","color","updater","updaters","init","mover","movers","particleInit","plugin","particleCreated","isVisible","isInsideCanvas","getRadius","draw","delta","drawParticlePlugin","drawParticle","getPosition","getMass","PI","getFillColor","roll","backColor","alter","backFactor","mode","backSum","rolled","floor","angle","getStrokeColor","strokeColor","destroy","override","particleDestroyed","destroyOptions","split","reset","opacity","splitOptions","rate","i","addSplitParticle","tryCount","pluginPos","particlePosition","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","checkOverlap","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","baseVelocity","res","moveOptions","rad","radOffset","range","straight","speed","length","lifeOptions","delayTime","duration","time","WeakMap"],"sources":["/Users/zhangcao/Desktop/ZhangCao_Henry_Portfolio/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Particle_engine;\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { colorToRgb, getHslFromAnimation } from \"../Utils/ColorUtils\";\nimport { deepExtend, isInArray, itemFromArray, loadParticlesOptions } from \"../Utils/Utils\";\nimport { Shape } from \"../Options/Classes/Particles/Shape/Shape\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nconst fixOutMode = (data) => {\n    if (!(isInArray(data.outMode, data.checkModes) || isInArray(data.outMode, data.checkModes))) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        _Particle_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Particle_engine, engine, \"f\");\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(mainOptions.particles);\n        const shapeType = particlesOptions.shape.type, reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        this.pathDelay = getValue(this.options.move.path.delay) * 1000;\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = 0;\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = 0;\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = Math.random() >= 0.5 ? 0 : 1;\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = 1;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.retina.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.bubble = {\n            inRange: false,\n        };\n        this.position = this.calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenterPerc = this.options.move.center;\n        this.moveCenter = {\n            x: (canvasSize.width * moveCenterPerc.x) / 100,\n            y: (canvasSize.height * moveCenterPerc.y) / 100,\n            radius: this.options.move.center.radius,\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        const gravityOptions = this.options.move.gravity;\n        this.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = __classPrivateFieldGet(this, _Particle_engine, \"f\").plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        this.shadowColor = colorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            if (updater.init) {\n                updater.init(this);\n            }\n        }\n        for (const mover of container.particles.movers) {\n            if (mover.init) {\n                mover.init(this);\n            }\n        }\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.options.roll.mode === \"both\" ? 2 : 1, backSum = this.options.roll.mode === \"horizontal\" ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === \"split\") {\n            this.split();\n        }\n    }\n    reset() {\n        if (this.opacity) {\n            this.opacity.loops = 0;\n        }\n        this.size.loops = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = getValue(splitOptions.rate);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value);\n        const radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset);\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, shapeData instanceof Array ? itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container, particlesOptions = this.options, lifeOptions = particlesOptions.life, life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\n_Particle_engine = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}