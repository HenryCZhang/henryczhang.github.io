{"ast":null,"code":"/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function () {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function () {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function (vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function (muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function () {\n      var self = this || Howler; // Loop through all Howls and stop them.\n\n      for (var i = 0; i < self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function () {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function (ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function () {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function () {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function () {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function (e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function () {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function (audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function () {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending'; // Handle updating the state of the audio context after suspending.\n\n        var handleSuspension = function () {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        }; // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n\n\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function () {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function (o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function (o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' || o.preload === 'metadata' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n      }; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function () {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function (sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function () {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function () {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function () {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function () {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n                } else {\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function () {\n            self._state = 'loaded'; // Begin playback.\n\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function (id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function () {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function (id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function () {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function (muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function () {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function () {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function () {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function (from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function () {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function (sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Make sure the volume is in the right bounds.\n\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        } // Change the volume.\n\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function (id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function () {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop; // If playing, restart playback to ensure looping updates.\n\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function () {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function () {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function () {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return 0;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function () {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function () {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function () {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function (id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function (id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function () {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function () {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function (event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function (event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function (event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function (event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function (event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function (sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function (id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function (id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function () {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function () {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function (id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function (sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function (node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function (node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function (howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function () {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function () {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n\n\n        self._endFn = self._endListener.bind(self);\n\n        self._node.addEventListener('ended', self._endFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function () {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function () {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function () {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function () {\n      var self = this;\n      var parent = self._parent; // Only handle the `ended`` event if the duration is Infinity.\n\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10; // Update the sprite that corresponds to the real duration.\n\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        } // Run the regular ended method.\n\n\n        parent._ended(self);\n      } // Clear the event listener since the duration is now correct.\n\n\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function (self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer'; // Apply any custom headers to the request.\n\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function (xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function (arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function () {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function (buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function (self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function () {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Add to global in Node.js (for testing, etc).\n\n\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {\n    // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n\n(function () {\n  'use strict'; // Setup default properties.\n\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Loop through all Howls and update their stereo panning.\n\n\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n\n\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n\n\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n\n\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this; // Setup user-defined default properties.\n\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      }; // Setup event listeners.\n\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : []; // Complete initilization with howler.js core's init function.\n\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n\n\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function () {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\n\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    } // Change the streo panning of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.\n\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n\n\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change position when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function () {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    } // Change the spatial position of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n\n\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function () {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    } // Change the spatial orientation of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n\n\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // Determine the values based on arguments.\n\n\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0]; // Set the grou's panner attribute values.\n\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    } // Update the values of the specified sounds.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        }; // Update the panner values or create a new panner if none exists.\n\n        var panner = sound._panner;\n\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          } // Create a new panner node.\n\n\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Setup user-defined default properties.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.\n\n      _super.call(this); // If a stereo or position was specified, set it up.\n\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Reset all spatial plugin properties on this sound.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // If a stereo or position was specified, set it up.\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n\n        self._panner = undefined;\n\n        parent._refreshBuffer(self);\n      } // Complete resetting of the sound.\n\n\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n\n\n  var setupPanner = function (sound, type) {\n    type = type || 'spatial'; // Create the new panner node.\n\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node); // Update the connections.\n\n\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();","map":{"version":3,"names":["HowlerGlobal","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","ua","userAgent","checkOpera","match","isOldOpera","parseInt","split","checkSafari","indexOf","safariVersion","isOldSafari","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","seekAndEmit","emitSeek","realTime","rateSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","checkIE","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","define","amd","exports","global","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_super","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"sources":["/Users/zhangcao/Desktop/ZhangCao_Henry_Portfolio/node_modules/howler/dist/howler.js"],"sourcesContent":["/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}